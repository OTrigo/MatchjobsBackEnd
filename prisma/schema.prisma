generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id          String        @id @default(cuid()) @db.VarChar(30)
  email       String        @unique @db.VarChar(255)
  password    String        @db.VarChar(255)
  name        String        @db.VarChar(255)
  role        String        @default("User") @db.VarChar(30)
  portifolio  String?       @db.Text
  address     String?       @db.VarChar(255)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  companyId   String?       @db.VarChar(30)
  post        post[]
  application application[]
  company     company?      @relation(fields: [companyId], references: [id])
}

model company {
  id          String        @id @default(cuid()) @db.VarChar(30)
  name        String        @db.VarChar(255)
  sector      String        @db.VarChar(255)
  employees   Int           @db.Integer
  rating      Float         @default(5) @db.DoublePrecision
  job         job[]
  application application[]
  user        user[]
}

model job {
  id          String        @id @default(cuid()) @db.VarChar(30)
  title       String        @db.VarChar(60)
  description String        @db.VarChar(255)
  available   Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String        @db.VarChar(30)
  post        post[]
  application application[]
  company     company?      @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId   String?       @db.VarChar(30)
}

model application {
  id        String   @id @default(cuid()) @db.VarChar(30)
  userId    String   @db.VarChar(30)
  jobId     String   @db.VarChar(30)
  companyId String?  @db.VarChar(30)
  user      user     @relation(fields: [userId], references: [id])
  job       job      @relation(fields: [jobId], references: [id])
  company   company? @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String?
}

model post {
  id          String    @id @default(cuid()) @db.VarChar(30)
  title       String    @db.VarChar(60)
  description String    @db.VarChar(255)
  videoUrl    String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @db.VarChar(30)
  jobId       String?   @db.VarChar(30)
  analyticsId String?   @db.VarChar(30)
  user        user      @relation(fields: [userId], references: [id])
  job         job?      @relation(fields: [jobId], references: [id])
  analytic    analytic? @relation(fields: [analyticsId], references: [id])
}

model analytic {
  id             String @id @default(cuid()) @db.VarChar(30)
  views          Int    @default(0) @db.Integer
  likes          Int    @default(0) @db.Integer
  commentsAmount Int    @default(0) @db.Integer
  shares         Int    @default(0) @db.Integer
  saves          Int    @default(0) @db.Integer
  score          Int    @default(0) @db.Integer
  postId         String @db.VarChar(30)
  post           post[]
}
